(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[454],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=s.createContext({}),c=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?s.createElement(h,o(o({ref:t},p),{},{components:n})):s.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<a;c++)o[c]=n[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},767:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var s=n(2122),r=n(9756),a=(n(7294),n(3905)),o=["components"],i={title:"Assertions",sidebar_label:"Assertions"},l=void 0,c={unversionedId:"assertions",id:"assertions",isDocsHomePage:!1,title:"Assertions",description:"In the Test module, we provide very basic assertion material.",source:"@site/docs/assertions.md",sourceDirName:".",slug:"/assertions",permalink:"/rescript-test/assertions",editUrl:"https://github.com/bloodyowl/rescript-test/edit/main/docs/docs/assertions.md",version:"current",frontMatter:{title:"Assertions",sidebar_label:"Assertions"},sidebar:"docs",previous:{title:"API",permalink:"/rescript-test/api"},next:{title:"Test output",permalink:"/rescript-test/test-output"}},p=[{value:"assertion",id:"assertion",children:[]},{value:"throws",id:"throws",children:[]},{value:"doesNotThrow",id:"doesnotthrow",children:[]},{value:"pass",id:"pass",children:[]},{value:"fail",id:"fail",children:[]},{value:"todo",id:"todo",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"Test")," module, we provide very basic assertion material. "),(0,a.kt)("p",null,"The framework ",(0,a.kt)("strong",{parentName:"p"},"doesn't handle comparisons for you"),", you'll need to provide your comparator functions. The goal is to avoid expensive recursive comparisons as much as possible (while still letting you do them if necessary)."),(0,a.kt)("h2",{id:"assertion"},"assertion"),(0,a.kt)("p",null,"Assertion is the basic building block, here's its signature:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"assertion(\n  // comparison function, returns a boolean\n  comparator,\n  // the value you're testing\n  a,\n  // the value you're expecting\n  b,\n  // optional, gives a name in case of test failure\n  ~operator: string=?,\n  // optional, gives a message on the test line\n  ~message: string=?,\n)\n")),(0,a.kt)("p",null,"Let's write a simple assertion:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'assertion(\n  (a, b) => a === b,\n  1,\n  1,\n  ~operator="Int equals",\n  ~message="One equals one",\n)\n')),(0,a.kt)("p",null,"You can see how this can be a bit redundant. What we recommend is to create an ",(0,a.kt)("inlineCode",{parentName:"p"},"Assert.res")," file containing the most common assertions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Assert.res"',title:'"Assert.res"'},'let intEqual = (~message=?, a: int, b: int) =>\n  assertion(~message?, ~operator="Int equals", (a, b) => a === b, a, b)\n')),(0,a.kt)("p",null,"And reuse them across your tests:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Add_test.res"',title:'"Add_test.res"'},'open Test\nopen Assert\n\ntest("Add", () => {\n  intEquals(add(1, 1), 2)\n  intEquals(~message="1 + 2 === 3", add(1, 2), 3)\n})\n')),(0,a.kt)("h2",{id:"throws"},"throws"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="TestForException_test.res"',title:'"TestForException_test.res"'},'test("Test with a function that\'s supposed to throw", () => {\n  throws(() => {\n    myFunction()\n  })\n\n  throws(() => {\n    myFunction()\n  }, ~message="myFunction throws")\n\n  throws(\n    () => myFunction(),\n    ~message="myFunction throws",\n    ~test=exn => {\n      // test than exn is the one expected\n    },\n  )\n})\n')),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Any exception thrown outside of a ",(0,a.kt)("inlineCode",{parentName:"p"},"throws")," call will result in the runner exiting with code 1"))),(0,a.kt)("h2",{id:"doesnotthrow"},"doesNotThrow"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="TestForException_test.res"',title:'"TestForException_test.res"'},'test("Test with a function that\'s not supposed to throw", () => {\n  doesNotThrow(() => {\n    myFunction()\n  })\n\n  doesNotThrow(() => {\n    myFunction()\n  }, ~message="myFunction doesn\'t throw")\n})\n')),(0,a.kt)("h2",{id:"pass"},"pass"),(0,a.kt)("p",null,"When you simply need to validate than a certain code path is reached, asserting a ",(0,a.kt)("inlineCode",{parentName:"p"},"pass")," is enough:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="TestWithPass_test.res"',title:'"TestWithPass_test.res"'},'test("Test with pass", () => {\n  myFunction(() => {\n    pass()\n  })\n  myFunction(() => {\n    pass(~message="Callback is reached", ())\n  })\n})\n')),(0,a.kt)("h2",{id:"fail"},"fail"),(0,a.kt)("p",null,"The other way around, when you want to assert that you don't reach a certain path:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="TestWithFail_test.res"',title:'"TestWithFail_test.res"'},'test("Test with fail", () => {\n  myFunction(() => {\n    fail()\n  })\n  myFunction(() => {\n    fail(~message="Callback is not reached", ())\n  })\n})\n')),(0,a.kt)("h2",{id:"todo"},"todo"),(0,a.kt)("p",null,"If you're in a hurry and want to remember you'll eventually need to write this test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="TestForLater_test.res"',title:'"TestForLater_test.res"'},'test("Test with todo", () => {\n  todo("Check that int overflows are handled")\n})\n')))}d.isMDXComponent=!0}}]);